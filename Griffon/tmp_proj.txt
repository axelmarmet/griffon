'@eq nat (Nat.add a b) (Nat.add (fst (mkPair a b)) (snd (mkPair a b)))'

Tree(constructor_app,
[
    Tree(constructor_ind, [Tree(names__inductive, [Tree(constructor_mutind, [Tree(constructor_mpfile, [Tree(constructor_dirpath, [Token(__ANON_1, 'Logic'), Token(__ANON_1, 'Init'), Token(__ANON_1, 'Coq')])]), Tree(constructor_dirpath, []), Tree(names__label__t, [Token(__ANON_1, 'eq')])]), Tree(int, [Token(SIGNED_INT, '0')])]), Tree(constructor_instance, [])]),
    Tree(constructor_ind, [Tree(names__inductive, [Tree(constructor_mutind, [Tree(constructor_mpfile, [Tree(constructor_dirpath, [Token(__ANON_1, 'Datatypes'), Token(__ANON_1, 'Init'), Token(__ANON_1, 'Coq')])]), Tree(constructor_dirpath, []), Tree(names__label__t, [Token(__ANON_1, 'nat')])]), Tree(int, [Token(SIGNED_INT, '0')])]), Tree(constructor_instance, [])]),
    Tree(constructor_app,
    [
        Tree(constructor_const, [Tree(constructor_constant, [Tree(constructor_mpfile, [Tree(constructor_dirpath, [Token(__ANON_1, 'Nat'), Token(__ANON_1, 'Init'), Token(__ANON_1, 'Coq')])]), Tree(constructor_dirpath, []), Tree(names__label__t, [Token(__ANON_1, 'add')])]), Tree(constructor_instance, [])]),
        Tree(constructor_var, [Token(__ANON_1, 'a')]),
        Tree(constructor_var, [Token(__ANON_1, 'b')])
    ]),
    Tree(constructor_app,
    [
        Tree(constructor_const, [Tree(constructor_constant, [Tree(constructor_mpfile, [Tree(constructor_dirpath, [Token(__ANON_1, 'Nat'), Token(__ANON_1, 'Init'), Token(__ANON_1, 'Coq')])]), Tree(constructor_dirpath, []), Tree(names__label__t, [Token(__ANON_1, 'add')])]), Tree(constructor_instance, [])]),
        Tree(constructor_app,
        [
            Tree(constructor_const,
            [
                Tree(constructor_constant,
                [
                    Tree(constructor_mpfile,
                    [
                        Tree(constructor_dirpath,
                        [
                            Token(__ANON_1, 'SerTop')
                        ])
                    ]),
                    Tree(constructor_dirpath, []),
                    Tree(names__label__t, [Token(__ANON_1, 'fst')])]), Tree(constructor_instance, [])]), Tree(constructor_app, [Tree(constructor_construct, [Tree(names__constructor, [Tree(names__inductive, [Tree(constructor_mutind, [Tree(constructor_mpfile, [Tree(constructor_dirpath, [Token(__ANON_1, 'SerTop')])]), Tree(constructor_dirpath, []), Tree(names__label__t, [Token(__ANON_1, 'FakePair')])]), Tree(int, [Token(SIGNED_INT, '0')])]), Tree(int, [Token(SIGNED_INT, '1')])]), Tree(constructor_instance, [])]), Tree(constructor_var, [Token(__ANON_1, 'a')]), Tree(constructor_var, [Token(__ANON_1, 'b')])])]), Tree(constructor_app, [Tree(constructor_const, [Tree(constructor_constant, [Tree(constructor_mpfile, [Tree(constructor_dirpath, [Token(__ANON_1, 'SerTop')])]), Tree(constructor_dirpath, []), Tree(names__label__t, [Token(__ANON_1, 'snd')])]), Tree(constructor_instance, [])]), Tree(constructor_app, [Tree(constructor_construct, [Tree(names__constructor, [Tree(names__inductive, [Tree(constructor_mutind, [Tree(constructor_mpfile, [Tree(constructor_dirpath, [Token(__ANON_1, 'SerTop')])]), Tree(constructor_dirpath, []), Tree(names__label__t, [Token(__ANON_1, 'FakePair')])]), Tree(int, [Token(SIGNED_INT, '0')])]), Tree(int, [Token(SIGNED_INT, '1')])]), Tree(constructor_instance, [])]), Tree(constructor_var, [Token(__ANON_1, 'a')]), Tree(constructor_var, [Token(__ANON_1, 'b')])])])])])