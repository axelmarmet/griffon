term = '@eq nat ((fun a : nat => Nat.add a (S O)) n) (Nat.add (S O) n)'
sexp = '(App (Ind (((Mutind (MPfile (DirPath ((Id Peano) (Id Init) (Id Coq)))) (DirPath ()) (Id le)) 0) (Instance ()))) ((Construct ((((Mutind (MPfile (DirPath ((Id Datatypes) (Id Init) (Id Coq)))) (DirPath ()) (Id nat)) 0) 1) (Instance ()))) (App (Fix (((0 0) 0) (((Name (Id tree_size)) (Name (Id forest_size))) ((Prod (Name (Id t)) (Ind (((Mutind (MPfile (DirPath ((Id SerTop)))) (DirPath ()) (Id tree)) 0) (Instance ()))) (Ind (((Mutind (MPfile (DirPath ((Id Datatypes) (Id Init) (Id Coq)))) (DirPath ()) (Id nat)) 0) (Instance ())))) (Prod (Name (Id f)) (Ind (((Mutind (MPfile (DirPath ((Id SerTop)))) (DirPath ()) (Id tree)) 1) (Instance ()))) (Ind (((Mutind (MPfile (DirPath ((Id Datatypes) (Id Init) (Id Coq)))) (DirPath ()) (Id nat)) 0) (Instance ()))))) ((Lambda (Name (Id t)) (Ind (((Mutind (MPfile (DirPath ((Id SerTop)))) (DirPath ()) (Id tree)) 0) (Instance ()))) (Case ((ci_ind ((Mutind (MPfile (DirPath ((Id SerTop)))) (DirPath ()) (Id tree)) 0)) (ci_npar 0) (ci_cstr_ndecls (2)) (ci_cstr_nargs (2)) (ci_pp_info ((ind_tags ()) (cstr_tags ((false false))) (style RegularStyle)))) (Lambda (Name (Id t)) (Ind (((Mutind (MPfile (DirPath ((Id SerTop)))) (DirPath ()) (Id tree)) 0) (Instance ()))) (Ind (((Mutind (MPfile (DirPath ((Id Datatypes) (Id Init) (Id Coq)))) (DirPath ()) (Id nat)) 0) (Instance ())))) (Rel 1) ((Lambda (Name (Id a)) (Const ((Constant (MPfile (DirPath ((Id SerTop)))) (DirPath ()) (Id A)) (Instance ()))) (Lambda (Name (Id f)) (Ind (((Mutind (MPfile (DirPath ((Id SerTop)))) (DirPath ()) (Id tree)) 1) (Instance ()))) (App (Construct ((((Mutind (MPfile (DirPath ((Id Datatypes) (Id Init) (Id Coq)))) (DirPath ()) (Id nat)) 0) 2) (Instance ()))) ((App (Rel 4) ((Rel 1)))))))))) (Lambda (Name (Id f)) (Ind (((Mutind (MPfile (DirPath ((Id SerTop)))) (DirPath ()) (Id tree)) 1) (Instance ()))) (Case ((ci_ind ((Mutind (MPfile (DirPath ((Id SerTop)))) (DirPath ()) (Id tree)) 1)) (ci_npar 0) (ci_cstr_ndecls (1 2)) (ci_cstr_nargs (1 2)) (ci_pp_info ((ind_tags ()) (cstr_tags ((false) (false false))) (style RegularStyle)))) (Lambda (Name (Id f)) (Ind (((Mutind (MPfile (DirPath ((Id SerTop)))) (DirPath ()) (Id tree)) 1) (Instance ()))) (Ind (((Mutind (MPfile (DirPath ((Id Datatypes) (Id Init) (Id Coq)))) (DirPath ()) (Id nat)) 0) (Instance ())))) (Rel 1) ((Lambda (Name (Id b)) (Const ((Constant (MPfile (DirPath ((Id SerTop)))) (DirPath ()) (Id B)) (Instance ()))) (App (Construct ((((Mutind (MPfile (DirPath ((Id Datatypes) (Id Init) (Id Coq)))) (DirPath ()) (Id nat)) 0) 2) (Instance ()))) ((Construct ((((Mutind (MPfile (DirPath ((Id Datatypes) (Id Init) (Id Coq)))) (DirPath ()) (Id nat)) 0) 1) (Instance ())))))) (Lambda (Name (Id t)) (Ind (((Mutind (MPfile (DirPath ((Id SerTop)))) (DirPath ()) (Id tree)) 0) (Instance ()))) (Lambda (Name (Id "f\'")) (Ind (((Mutind (MPfile (DirPath ((Id SerTop)))) (DirPath ()) (Id tree)) 1) (Instance ()))) (App (Const ((Constant (MPfile (DirPath ((Id Nat) (Id Init) (Id Coq)))) (DirPath ()) (Id add)) (Instance ()))) ((App (Rel 5) ((Rel 2))) (App (Rel 4) ((Rel 1)))))))))))))) ((Var (Id t))))))'


term_parser = GallinaTermParser(caching=False)
tree = term_parser.parse(sexp)


statement_creator = Stage1StatementCreator(term_parser)
res = statement_creator(sexp, "hypothesis")

" ".join(res.tokens)