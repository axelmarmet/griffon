"le O ((fix length (l : list A) : nat := match l with | nil => O | cons a l' => S (length l') end) l1)"

'goal Peano Init Coq le 0
    Datatypes Init Coq nat 0 1
    fix
        length
        forall l Datatypes Init Coq list 0 A Datatypes Init Coq nat 0
        lambda
            l
            Datatypes Init Coq list 0 A
            match
                lambda
                    l
                    Datatypes Init Coq list 0 A
                    Datatypes Init Coq nat 0
                l
                Datatypes Init Coq nat 0 1
                lambda
                    a
                    A
                    lambda
                        "l\'"
                        Datatypes Init Coq list 0 A
                        Datatypes Init Coq nat 0 2 length "l\'" l1'

Tree(constructor_app,
[
    Tree(constructor_ind, [Tree(names__inductive, [Tree(constructor_mutind, [Tree(constructor_mpfile, [Tree(constructor_dirpath, [Token(__ANON_1, 'Peano'), Token(__ANON_1, 'Init'), Token(__ANON_1, 'Coq')])]), Tree(constructor_dirpath, []), Tree(names__label__t, [Token(__ANON_1, 'le')])]), Tree(int, [Token(SIGNED_INT, '0')])]), Tree(constructor_instance, [])]),
    Tree(constructor_construct, [Tree(names__constructor, [Tree(names__inductive, [Tree(constructor_mutind, [Tree(constructor_mpfile, [Tree(constructor_dirpath, [Token(__ANON_1, 'Datatypes'), Token(__ANON_1, 'Init'), Token(__ANON_1, 'Coq')])]), Tree(constructor_dirpath, []), Tree(names__label__t, [Token(__ANON_1, 'nat')])]), Tree(int, [Token(SIGNED_INT, '0')])]), Tree(int, [Token(SIGNED_INT, '1')])]), Tree(constructor_instance, [])]),
    Tree(constructor_app,
    [
        Tree(constructor_fix,
        [
            Tree(constr__pfixpoint___constr__constr____constr__constr,
            [
                Tree(int,
                [
                    Token(SIGNED_INT, '0')
                ]),
                Tree(int,
                [
                    Token(SIGNED_INT, '0')
                ]),
                Tree(constr__prec_declaration___constr__constr____constr__constr,
                [
                    Tree(constructor_name,
                    [
                        Token(__ANON_1, 'length')
                    ]),
                    Tree(constructor_prod,
                    [
                        Tree(constructor_name, [Token(__ANON_1, 'l')]),
                        Tree(constructor_app,
                        [
                            Tree(constructor_ind, [Tree(names__inductive, [Tree(constructor_mutind, [Tree(constructor_mpfile, [Tree(constructor_dirpath, [Token(__ANON_1, 'Datatypes'), Token(__ANON_1, 'Init'), Token(__ANON_1, 'Coq')])]), Tree(constructor_dirpath, []), Tree(names__label__t, [Token(__ANON_1, 'list')])]), Tree(int, [Token(SIGNED_INT, '0')])]), Tree(constructor_instance, [])]),
                            Tree(constructor_var, [Token(__ANON_1, 'A')])
                        ]),
                        Tree(constructor_ind,
                        [
                            Tree(names__inductive, [Tree(constructor_mutind, [Tree(constructor_mpfile, [Tree(constructor_dirpath, [Token(__ANON_1, 'Datatypes'), Token(__ANON_1, 'Init'), Token(__ANON_1, 'Coq')])]), Tree(constructor_dirpath, []), Tree(names__label__t, [Token(__ANON_1, 'nat')])]), Tree(int, [Token(SIGNED_INT, '0')])]),
                            Tree(constructor_instance, [])
                        ])
                    ]),
                    Tree(constructor_lambda,
                    [
                        Tree(constructor_name, [Token(__ANON_1, 'l')]),
                        Tree(constructor_app, [Tree(constructor_ind, [Tree(names__inductive, [Tree(constructor_mutind, [Tree(constructor_mpfile, [Tree(constructor_dirpath, [Token(__ANON_1, 'Datatypes'), Token(__ANON_1, 'Init'), Token(__ANON_1, 'Coq')])]), Tree(constructor_dirpath, []), Tree(names__label__t, [Token(__ANON_1, 'list')])]), Tree(int, [Token(SIGNED_INT, '0')])]), Tree(constructor_instance, [])]), Tree(constructor_var, [Token(__ANON_1, 'A')])]),
                        Tree(constructor_case,
                        [
                            Tree(constr__case_info, [Token(__ANON_3, 'ci_ind'), Tree(names__inductive, [Tree(constructor_mutind, [Tree(constructor_mpfile, [Tree(constructor_dirpath, [Token(__ANON_1, 'Datatypes'), Token(__ANON_1, 'Init'), Token(__ANON_1, 'Coq')])]), Tree(constructor_dirpath, []), Tree(names__label__t, [Token(__ANON_1, 'list')])]), Tree(int, [Token(SIGNED_INT, '0')])]), Token(__ANON_4, 'ci_npar'), Tree(int, [Token(SIGNED_INT, '1')]), Token(__ANON_5, 'ci_cstr_ndecls'), Tree(int, [Token(SIGNED_INT, '0')]), Tree(int, [Token(SIGNED_INT, '2')]), Token(__ANON_6, 'ci_cstr_nargs'), Tree(int, [Token(SIGNED_INT, '0')]), Tree(int, [Token(SIGNED_INT, '2')]), Token(__ANON_7, 'ci_pp_info'), Tree(constr__case_printing, [Token(__ANON_8, 'ind_tags'), Token(__ANON_9, 'cstr_tags'), Tree(bool, []), Tree(bool, []), Token(__ANON_10, 'style'), Tree(constructor_regularstyle, [])])]),
                            Tree(constructor_lambda, [Tree(constructor_name, [Token(__ANON_1, 'l')]), Tree(constructor_app, [Tree(constructor_ind, [Tree(names__inductive, [Tree(constructor_mutind, [Tree(constructor_mpfile, [Tree(constructor_dirpath, [Token(__ANON_1, 'Datatypes'), Token(__ANON_1, 'Init'), Token(__ANON_1, 'Coq')])]), Tree(constructor_dirpath, []), Tree(names__label__t, [Token(__ANON_1, 'list')])]), Tree(int, [Token(SIGNED_INT, '0')])]), Tree(constructor_instance, [])]), Tree(constructor_var, [Token(__ANON_1, 'A')])]), Tree(constructor_ind, [Tree(names__inductive, [Tree(constructor_mutind, [Tree(constructor_mpfile, [Tree(constructor_dirpath, [Token(__ANON_1, 'Datatypes'), Token(__ANON_1, 'Init'), Token(__ANON_1, 'Coq')])]), Tree(constructor_dirpath, []), Tree(names__label__t, [Token(__ANON_1, 'nat')])]), Tree(int, [Token(SIGNED_INT, '0')])]), Tree(constructor_instance, [])])]),
                            Tree(constructor_rel, [Tree(int, [Token(SIGNED_INT, '1')])]),
                            Tree(constructor_construct,
                            [
                                Tree(names__constructor, [Tree(names__inductive, [Tree(constructor_mutind, [Tree(constructor_mpfile, [Tree(constructor_dirpath, [Token(__ANON_1, 'Datatypes'), Token(__ANON_1, 'Init'), Token(__ANON_1, 'Coq')])]), Tree(constructor_dirpath, []), Tree(names__label__t, [Token(__ANON_1, 'nat')])]), Tree(int, [Token(SIGNED_INT, '0')])]), Tree(int, [Token(SIGNED_INT, '1')])]),
                                Tree(constructor_instance, [])
                            ]),
                            Tree(constructor_lambda,
                            [
                                Tree(constructor_name, [Token(__ANON_1, 'a')]),
                                Tree(constructor_var, [Token(__ANON_1, 'A')]),
                                Tree(constructor_lambda,
                                [
                                    Tree(constructor_name, [Token(__ANON_1, '"l\'"')]),
                                    Tree(constructor_app, [Tree(constructor_ind, [Tree(names__inductive, [Tree(constructor_mutind, [Tree(constructor_mpfile, [Tree(constructor_dirpath, [Token(__ANON_1, 'Datatypes'), Token(__ANON_1, 'Init'), Token(__ANON_1, 'Coq')])]), Tree(constructor_dirpath, []), Tree(names__label__t, [Token(__ANON_1, 'list')])]), Tree(int, [Token(SIGNED_INT, '0')])]), Tree(constructor_instance, [])]), Tree(constructor_var, [Token(__ANON_1, 'A')])]),
                                    Tree(constructor_app,
                                    [
                                        Tree(constructor_construct, [Tree(names__constructor, [Tree(names__inductive, [Tree(constructor_mutind, [Tree(constructor_mpfile, [Tree(constructor_dirpath, [Token(__ANON_1, 'Datatypes'), Token(__ANON_1, 'Init'), Token(__ANON_1, 'Coq')])]), Tree(constructor_dirpath, []), Tree(names__label__t, [Token(__ANON_1, 'nat')])]), Tree(int, [Token(SIGNED_INT, '0')])]), Tree(int, [Token(SIGNED_INT, '2')])]), Tree(constructor_instance, [])]),
                                        Tree(constructor_app,
                                        [
                                            Tree(constructor_rel,
                                            [
                                                Tree(int, [Token(SIGNED_INT, '4')])
                                            ]),
                                            Tree(constructor_rel,
                                            [
                                                Tree(int, [Token(SIGNED_INT, '1')])
                                            ])
                                        ])
                                    ])
                                ])
                            ])
                        ])
                    ])
                ])
            ])
        ]),
        Tree(constructor_var, [Token(__ANON_1, 'l1')])
    ])
])


'@In
    nat
    x
    (@app
        nat
        (
            (fix freeVarTerm (s : Term L) : list nat :=
                match s with
                | @var _ v => @cons nat v (@nil nat)
                | @apply _ f ts => freeVarTerms (arity L (@inr (Relations L) (Functions L) f)) ts
                end with
                freeVarTerms (n : nat) (ss : Terms L n) {struct ss} : list nat := match ss with | @Tnil _ => @nil nat | @Tcons _ m t ts => @app nat (freeVarTerm t) (freeVarTerms m ts) end for freeVarTerm) t0) ((fix freeVarTerm (s : Term L) : list nat := match s with | @var _ v => @cons nat v (@nil nat) | @apply _ f ts => freeVarTerms (arity L (@inr (Relations L) (Functions L) f)) ts end with freeVarTerms (n : nat) (ss : Terms L n) {struct ss} : list nat := match ss with | @Tnil _ => @nil nat | @Tcons _ m t ts => @app nat (freeVarTerm t) (freeVarTerms m ts) end for freeVarTerms) n t1))'